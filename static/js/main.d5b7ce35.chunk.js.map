{"version":3,"sources":["utils/index.js","App.js","serviceWorker.js","index.js"],"names":["numberFormat","value","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","pdfMake","vfs","pdfFonts","App","dep","deposits","data","React","useState","param","sort","a","b","period_from","forEach","el","summs_and_rate","summ_from","selected","setSelected","summ","term","userInput","setUserInput","perc","income","userOutput","setUserOutput","handleInputChange","name","event","target","replace","newValue","parseInt","minSumm","sumLabel","minTerm","toString","termLabel","slice","Container","maxWidth","position","autoClose","hideProgressBar","Card","CardContent","handleChange","FormControl","InputLabel","Select","onChange","map","MenuItem","key","code","renderSelect","customInput","TextField","min","label","thousandSeparator","decimalSeparator","allowNegative","helperText","InputProps","endAdornment","InputAdornment","bind","Button","variant","color","onClick","toast","error","summsAndRate","rate","i","length","interval","Infinity","toFixed","className","startIcon","document","content","text","style","styles","header","fontSize","bold","margin","default","createPdf","print","createPDF","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d5b7ce35.chunk.js","sourcesContent":["import pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\n\nconst numberFormat = (value) =>\n  new Intl.NumberFormat(\"ja-JP\", {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(value);\n\nexport default numberFormat;\n\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nexport function createPDF(selected, userInput, userOutput) {\n  const document = {\n    content: [\n      { text: `Тип  вклада: ${selected.name}`, style: \"header\" },\n      { text: `Cумма: ${numberFormat(userInput.summ)} руб.`, style: \"default\" },\n      { text: `Срок в днях: ${userInput.term}`, style: \"default\" },\n      {\n        text: `Процентная ставка: ${userOutput.perc} % годовых`,\n        style: \"default\",\n      },\n      {\n        text: `Доход за выбранный период составит: ${numberFormat(\n          userOutput.income\n        )} руб.`,\n        style: \"default\",\n      },\n    ],\n    styles: {\n      header: {\n        fontSize: 16,\n        bold: true,\n        margin: [0, 10, 0, 10],\n      },\n      default: {\n        margin: [0, 5, 0, 5],\n      },\n    },\n  };\n  pdfMake.createPdf(document).print();\n}\n","import React from \"react\";\nimport {\n  Container,\n  Card,\n  CardContent,\n  MenuItem,\n  Select,\n  InputLabel,\n  FormControl,\n  TextField,\n  InputAdornment,\n  Button,\n} from \"@material-ui/core\";\nimport data from \"./depcalc.json\";\nimport numberFormat, { createPDF } from \"./utils\";\nimport \"./App.scss\";\nimport NumberFormat from \"react-number-format\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nconst formatDeposit = (dep) => {\n  dep.param.sort((a, b) => a.period_from - b.period_from);\n  dep.param.forEach((el) => {\n    el.summs_and_rate.sort((a, b) => a.summ_from - b.summ_from);\n  });\n  return dep;\n};\n\nfunction App() {\n  const deposits = data.deposits;\n\n  const [selected, setSelected] = React.useState(formatDeposit(deposits[0]));\n  const [userInput, setUserInput] = React.useState({ summ: \"\", term: \"\" });\n  const [userOutput, setUserOutput] = React.useState({\n    perc: \"\",\n    income: \"\",\n  });\n\n  const handleSelectChange = (event) => {\n    setSelected(event.target.value);\n  };\n\n  const handleInputChange = (name, event) => {\n    const value =\n      name === \"summ\"\n        ? event.target.value.replace(/,/g, \"\")\n        : event.target.value;\n    const newValue = { ...userInput };\n    newValue[name] = parseInt(value);\n    setUserInput(newValue);\n  };\n\n  const calculateOutput = () => {\n    if (!userInput.summ && !userInput.term) {\n      toast.error(\"введите данные для расчета!\");\n      return;\n    }\n    if (userInput.summ < minSumm) {\n      toast.error(sumLabel);\n      return;\n    }\n    if (userInput.term < minTerm) {\n      toast.error(termLabel);\n      return;\n    }\n\n    let summsAndRate;\n    for (let i = 0; i < selected.param.length; i++) {\n      const el = selected.param;\n\n      const interval = [\n        el[i].period_from,\n        el[i + 1] ? el[i + 1].period_from : Infinity,\n      ];\n\n      if (userInput.term >= interval[0] && userInput.term < interval[1]) {\n        summsAndRate = selected.param[i].summs_and_rate;\n      }\n    }\n\n    let rate;\n    for (let i = 0; i < summsAndRate.length; i++) {\n      if (\n        summsAndRate[i].summ_from <= userInput.summ &&\n        userInput.summ < summsAndRate[i + 1]\n          ? summsAndRate[i + 1].summ_from\n          : Infinity\n      ) {\n        rate = summsAndRate[i].rate;\n      }\n    }\n\n    const income = (\n      (userInput.summ * userInput.term * rate) /\n      (365 * 100)\n    ).toFixed(2);\n    // setUserInput(emptyUserInput);\n    setUserOutput({ perc: rate, income: income });\n  };\n\n  const openPDF = () => {\n    createPDF(selected, userInput, userOutput);\n  };\n  const minSumm = selected.param[0].summs_and_rate[0].summ_from;\n  const sumLabel = `минимальная сумма ${numberFormat(minSumm)} рублей`;\n\n  const minTerm = selected.param[0].period_from.toString();\n\n  const termLabel = `минимальный срок ${minTerm}${\n    minTerm.slice(-1) === \"1\"\n      ? \" день\"\n      : minTerm.slice(-1) === (\"2\" || \"3\" || \"4\")\n      ? \" дня\"\n      : \" дней\"\n  } `;\n\n  return (\n    <Container maxWidth=\"md\">\n      <h2>Депозитный калькулятор</h2>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar={true}\n      />\n      <Card>\n        <CardContent>\n          {renderSelect(deposits, handleSelectChange, selected)}\n          <NumberFormat\n            customInput={TextField}\n            min={0}\n            label=\"сумма\"\n            thousandSeparator={true}\n            decimalSeparator={false}\n            allowNegative={false}\n            value={userInput.summ}\n            helperText={sumLabel}\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">₽</InputAdornment>,\n              min: 0,\n            }}\n            onChange={handleInputChange.bind(null, \"summ\")}\n          />\n\n          <NumberFormat\n            customInput={TextField}\n            decimalSeparator={false}\n            allowNegative={false}\n            label=\"срок вклада в днях\"\n            value={userInput.term}\n            onChange={handleInputChange.bind(null, \"term\")}\n            helperText={termLabel}\n          />\n          <Button variant=\"contained\" color=\"primary\" onClick={calculateOutput}>\n            рассчитать\n          </Button>\n          {!(userOutput.perc === \"\") & !(userOutput.income === \"\") ? (\n            <div className=\"userOutput\">\n              <div className=\"output_perc\">\n                <span> процентная ставка:</span>\n                <TextField value={userOutput.perc} /> % годовых\n              </div>\n              <div className=\"output_income\">\n                <span> доход:</span>\n                <TextField value={numberFormat(userOutput.income)} />\n                руб\n              </div>\n\n              <Button\n                variant=\"contained\"\n                color=\"default\"\n                startIcon={<PrintIcon />}\n                onClick={openPDF}\n              >\n                на печать\n              </Button>\n            </div>\n          ) : null}\n        </CardContent>\n      </Card>\n    </Container>\n  );\n}\n\nexport default App;\n\nfunction renderSelect(data, handleChange, selected) {\n  return (\n    <FormControl>\n      <InputLabel>тип вклада</InputLabel>\n      <Select value={selected} onChange={handleChange}>\n        {data.map((el) => {\n          return (\n            <MenuItem value={el} key={el.code}>\n              {el.name}\n            </MenuItem>\n          );\n        })}\n      </Select>\n    </FormControl>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}